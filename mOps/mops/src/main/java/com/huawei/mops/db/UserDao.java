package com.huawei.mops.db;


import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.huawei.mops.bean.User;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property LoginName = new Property(1, String.class, "loginName", false, "LOGIN_NAME");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property CsicIds = new Property(3, String.class, "csicIds", false, "CSIC_IDS");
        public final static Property CcsIds = new Property(4, String.class, "ccsIds", false, "CCS_IDS");
        public final static Property Csic_father_Ids = new Property(5, String.class, "csic_father_Ids", false, "CSIC_FATHER__IDS");
        public final static Property PassWord = new Property(6, String.class, "passWord", false, "PASS_WORD");
        public final static Property RoleName = new Property(7, String.class, "roleName", false, "ROLE_NAME");
        public final static Property RegionId = new Property(8, Integer.class, "regionId", false, "REGION_ID");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LOGIN_NAME\" TEXT," + // 1: loginName
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"CSIC_IDS\" TEXT," + // 3: csicIds
                "\"CCS_IDS\" TEXT," + // 4: ccsIds
                "\"CSIC_FATHER__IDS\" TEXT," + // 5: csic_father_Ids
                "\"PASS_WORD\" TEXT," + // 6: passWord
                "\"ROLE_NAME\" TEXT," + // 7: roleName
                "\"REGION_ID\" INTEGER);"); // 8: regionId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(2, loginName);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String csicIds = entity.getCsicIds();
        if (csicIds != null) {
            stmt.bindString(4, csicIds);
        }
 
        String ccsIds = entity.getCcsIds();
        if (ccsIds != null) {
            stmt.bindString(5, ccsIds);
        }
 
        String csic_father_Ids = entity.getCsic_father_Ids();
        if (csic_father_Ids != null) {
            stmt.bindString(6, csic_father_Ids);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(7, passWord);
        }
 
        String roleName = entity.getRoleName();
        if (roleName != null) {
            stmt.bindString(8, roleName);
        }
 
        Integer regionId = entity.getRegionId();
        if (regionId != null) {
            stmt.bindLong(9, regionId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(2, loginName);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String csicIds = entity.getCsicIds();
        if (csicIds != null) {
            stmt.bindString(4, csicIds);
        }
 
        String ccsIds = entity.getCcsIds();
        if (ccsIds != null) {
            stmt.bindString(5, ccsIds);
        }
 
        String csic_father_Ids = entity.getCsic_father_Ids();
        if (csic_father_Ids != null) {
            stmt.bindString(6, csic_father_Ids);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(7, passWord);
        }
 
        String roleName = entity.getRoleName();
        if (roleName != null) {
            stmt.bindString(8, roleName);
        }
 
        Integer regionId = entity.getRegionId();
        if (regionId != null) {
            stmt.bindLong(9, regionId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // loginName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // csicIds
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ccsIds
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // csic_father_Ids
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // passWord
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // roleName
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // regionId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLoginName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCsicIds(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCcsIds(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCsic_father_Ids(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPassWord(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRoleName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRegionId(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
